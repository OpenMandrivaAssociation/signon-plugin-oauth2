From d38cd1e356506f6ded2211eba8f1127e846fdf2d Mon Sep 17 00:00:00 2001
From: Alberto Mardegan <mardy@users.sourceforge.net>
Date: Sun, 20 Dec 2020 22:30:43 +0300
Subject: [PATCH] Don't use deprecated QUrl methods to inspect the query

---
 src/oauth1plugin.cpp | 26 ++++++++------
 src/oauth2plugin.cpp | 83 ++++++++++++++++++++++----------------------
 src/oauth2plugin.h   |  4 ++-
 3 files changed, 59 insertions(+), 54 deletions(-)

diff --git a/src/oauth1plugin.cpp b/src/oauth1plugin.cpp
index 8892d62..57c036d 100644
--- a/src/oauth1plugin.cpp
+++ b/src/oauth1plugin.cpp
@@ -27,6 +27,7 @@
 #include "oauth2tokendata.h"
 
 #include <QUrl>
+#include <QUrlQuery>
 #include <QNetworkReply>
 #include <QNetworkRequest>
 #include <QDateTime>
@@ -146,12 +147,14 @@ void OAuth1Plugin::sendOAuth1AuthRequest()
     Q_D(OAuth1Plugin);
 
     QUrl url(d->m_oauth1Data.AuthorizationEndpoint());
-    url.addQueryItem(OAUTH_TOKEN, d->m_oauth1Token);
+    QUrlQuery query(url);
+    query.addQueryItem(OAUTH_TOKEN, d->m_oauth1Token);
     if (!d->m_oauth1ScreenName.isEmpty()) {
         // Prefill username for Twitter
-        url.addQueryItem(SCREEN_NAME, d->m_oauth1ScreenName);
-        url.addQueryItem(FORCE_LOGIN, d->m_oauth1ScreenName);
+        query.addQueryItem(SCREEN_NAME, d->m_oauth1ScreenName);
+        query.addQueryItem(FORCE_LOGIN, d->m_oauth1ScreenName);
     }
+    url.setQuery(query);
     TRACE() << "URL = " << url.toString();
     SignOn::UiSessionData uiSession;
     uiSession.setOpenUrl(url.toString());
@@ -365,9 +368,10 @@ QByteArray OAuth1Plugin::constructSignatureBaseString(const QString &aUrl,
 
     QMap<QString, QString> oAuthHeaderMap;
     QUrl fullUrl(aUrl);
+    QUrlQuery query(fullUrl);
 
     // Constructing the base string as per RFC 5849. Sec 3.4.1
-    QList<QPair<QString, QString> > queryItems = fullUrl.queryItems();
+    QList<QPair<QString, QString> > queryItems = query.queryItems();
     QPair<QString, QString> queryItem;
     foreach (queryItem, queryItems) {
         oAuthHeaderMap[queryItem.first] = queryItem.second;
@@ -500,21 +504,21 @@ void OAuth1Plugin::userActionFinished(const SignOn::UiSessionData &data)
     TRACE() << data.UrlResponse();
 
     // Checking if authorization server granted access
-    QUrl url = QUrl(data.UrlResponse());
-    if (url.hasQueryItem(AUTH_ERROR)) {
+    QUrlQuery query(QUrl(data.UrlResponse()));
+    if (query.hasQueryItem(AUTH_ERROR)) {
         TRACE() << "Server denied access permission";
-        emit error(Error(Error::NotAuthorized, url.queryItemValue(AUTH_ERROR)));
+        emit error(Error(Error::NotAuthorized, query.queryItemValue(AUTH_ERROR)));
         return;
     }
 
-    if (url.hasQueryItem(OAUTH_VERIFIER)) {
-        d->m_oauth1TokenVerifier = url.queryItemValue(OAUTH_VERIFIER);
+    if (query.hasQueryItem(OAUTH_VERIFIER)) {
+        d->m_oauth1TokenVerifier = query.queryItemValue(OAUTH_VERIFIER);
         d->m_oauth1Data.setCallback(QString());
         d->m_oauth1RequestType = OAUTH1_POST_ACCESS_TOKEN;
         sendOAuth1PostRequest();
     }
-    else if (url.hasQueryItem(OAUTH_PROBLEM)) {
-        handleOAuth1ProblemError(url.queryItemValue(OAUTH_PROBLEM));
+    else if (query.hasQueryItem(OAUTH_PROBLEM)) {
+        handleOAuth1ProblemError(query.queryItemValue(OAUTH_PROBLEM));
     }
     else {
         emit error(Error(Error::NotAuthorized, QString("oauth_verifier missing")));
diff --git a/src/oauth2plugin.cpp b/src/oauth2plugin.cpp
index 57df6d8..d65e261 100644
--- a/src/oauth2plugin.cpp
+++ b/src/oauth2plugin.cpp
@@ -175,22 +175,24 @@ void OAuth2Plugin::sendOAuth2AuthRequest()
     Q_D(OAuth2Plugin);
 
     QUrl url = getAuthUrl();
-    url.addQueryItem(CLIENT_ID, d->m_oauth2Data.ClientId());
+    QUrlQuery query(url);
+    query.addQueryItem(CLIENT_ID, d->m_oauth2Data.ClientId());
     QString redirectUri = d->m_oauth2Data.RedirectUri();
-    url.addQueryItem(REDIRECT_URI, QUrl::toPercentEncoding(redirectUri));
+    query.addQueryItem(REDIRECT_URI, QUrl::toPercentEncoding(redirectUri));
     if (!d->m_oauth2Data.DisableStateParameter()) {
         d->m_state = QString::number(qrand());
-        url.addQueryItem(STATE, d->m_state);
+        query.addQueryItem(STATE, d->m_state);
     }
     QStringList responseType = d->m_oauth2Data.ResponseType();
     if (!responseType.isEmpty()) {
-        url.addQueryItem(RESPONSE_TYPE, responseType.join(" "));
+        query.addQueryItem(RESPONSE_TYPE, responseType.join(" "));
     }
     QStringList scopes = d->m_oauth2Data.Scope();
     if (!scopes.isEmpty()) {
         // Passing list of scopes
-        url.addQueryItem(SCOPE, QUrl::toPercentEncoding(scopes.join(" ")));
+        query.addQueryItem(SCOPE, QUrl::toPercentEncoding(scopes.join(" ")));
     }
+    url.setQuery(query);
     TRACE() << "Url = " << url.toString();
     SignOn::UiSessionData uiSession;
     uiSession.setOpenUrl(url.toString());
@@ -400,9 +402,10 @@ void OAuth2Plugin::userActionFinished(const SignOn::UiSessionData &data)
 
     // Checking if authorization server granted access
     QUrl url = QUrl(data.UrlResponse());
-    if (url.hasQueryItem(AUTH_ERROR)) {
+    QUrlQuery query(url);
+    if (query.hasQueryItem(AUTH_ERROR)) {
         TRACE() << "Server denied access permission";
-        emit error(Error(Error::NotAuthorized, url.queryItemValue(AUTH_ERROR)));
+        emit error(Error(Error::NotAuthorized, query.queryItemValue(AUTH_ERROR)));
         return;
     }
 
@@ -457,46 +460,42 @@ void OAuth2Plugin::userActionFinished(const SignOn::UiSessionData &data)
         // 2. Resource owner credentials (username, password)
         // 3. Assertion (assertion_type, assertion)
         // 4. Refresh Token (refresh_token)
-        QUrl newUrl;
-        QString query = d->m_oauth2Data.TokenQuery();
-        if (!query.isEmpty()) {
-            newUrl.setQuery(query);
-        }
+        QUrlQuery tokenQuery(d->m_oauth2Data.TokenQuery());
 
-        if (url.hasQueryItem(AUTH_CODE)) {
+        if (query.hasQueryItem(AUTH_CODE)) {
             if (!d->m_oauth2Data.DisableStateParameter() &&
-                d->m_state != url.queryItemValue(STATE)) {
+                d->m_state != query.queryItemValue(STATE)) {
                 Q_EMIT error(Error(Error::NotAuthorized,
                                    QString("'state' parameter mismatch")));
                 return;
             }
-            QString code = url.queryItemValue(AUTH_CODE);
-            newUrl.addQueryItem(GRANT_TYPE, AUTHORIZATION_CODE);
-            newUrl.addQueryItem(AUTH_CODE, code);
-            newUrl.addQueryItem(REDIRECT_URI, d->m_oauth2Data.RedirectUri());
-            sendOAuth2PostRequest(newUrl,
+            QString code = query.queryItemValue(AUTH_CODE);
+            tokenQuery.addQueryItem(GRANT_TYPE, AUTHORIZATION_CODE);
+            tokenQuery.addQueryItem(AUTH_CODE, code);
+            tokenQuery.addQueryItem(REDIRECT_URI, d->m_oauth2Data.RedirectUri());
+            sendOAuth2PostRequest(tokenQuery,
                                   GrantType::AuthorizationCode);
         }
-        else if (url.hasQueryItem(USERNAME) && url.hasQueryItem(PASSWORD)) {
-            QString username = url.queryItemValue(USERNAME);
-            QString password = url.queryItemValue(PASSWORD);
-            newUrl.addQueryItem(GRANT_TYPE, USER_BASIC);
-            newUrl.addQueryItem(USERNAME, username);
-            newUrl.addQueryItem(PASSWORD, password);
-            sendOAuth2PostRequest(newUrl,
+        else if (query.hasQueryItem(USERNAME) && query.hasQueryItem(PASSWORD)) {
+            QString username = query.queryItemValue(USERNAME);
+            QString password = query.queryItemValue(PASSWORD);
+            tokenQuery.addQueryItem(GRANT_TYPE, USER_BASIC);
+            tokenQuery.addQueryItem(USERNAME, username);
+            tokenQuery.addQueryItem(PASSWORD, password);
+            sendOAuth2PostRequest(tokenQuery,
                                   GrantType::UserBasic);
         }
-        else if (url.hasQueryItem(ASSERTION_TYPE) && url.hasQueryItem(ASSERTION)) {
-            QString assertion_type = url.queryItemValue(ASSERTION_TYPE);
-            QString assertion = url.queryItemValue(ASSERTION);
-            newUrl.addQueryItem(GRANT_TYPE, ASSERTION);
-            newUrl.addQueryItem(ASSERTION_TYPE, assertion_type);
-            newUrl.addQueryItem(ASSERTION, assertion);
-            sendOAuth2PostRequest(newUrl,
+        else if (query.hasQueryItem(ASSERTION_TYPE) && query.hasQueryItem(ASSERTION)) {
+            QString assertion_type = query.queryItemValue(ASSERTION_TYPE);
+            QString assertion = query.queryItemValue(ASSERTION);
+            tokenQuery.addQueryItem(GRANT_TYPE, ASSERTION);
+            tokenQuery.addQueryItem(ASSERTION_TYPE, assertion_type);
+            tokenQuery.addQueryItem(ASSERTION, assertion);
+            sendOAuth2PostRequest(tokenQuery,
                                   GrantType::Assertion);
         }
-        else if (url.hasQueryItem(REFRESH_TOKEN)) {
-            QString refresh_token = url.queryItemValue(REFRESH_TOKEN);
+        else if (query.hasQueryItem(REFRESH_TOKEN)) {
+            QString refresh_token = query.queryItemValue(REFRESH_TOKEN);
             refreshOAuth2Token(refresh_token);
         }
         else {
@@ -688,13 +687,13 @@ void OAuth2Plugin::handleOAuth2Error(const QByteArray &reply)
 void OAuth2Plugin::refreshOAuth2Token(const QString &refreshToken)
 {
     TRACE() << refreshToken;
-    QUrl url;
-    url.addQueryItem(GRANT_TYPE, REFRESH_TOKEN);
-    url.addQueryItem(REFRESH_TOKEN, refreshToken);
-    sendOAuth2PostRequest(url, GrantType::RefreshToken);
+    QUrlQuery query;
+    query.addQueryItem(GRANT_TYPE, REFRESH_TOKEN);
+    query.addQueryItem(REFRESH_TOKEN, refreshToken);
+    sendOAuth2PostRequest(query, GrantType::RefreshToken);
 }
 
-void OAuth2Plugin::sendOAuth2PostRequest(QUrl &postData,
+void OAuth2Plugin::sendOAuth2PostRequest(QUrlQuery &postData,
                                          GrantType::e grantType)
 {
     Q_D(OAuth2Plugin);
@@ -726,8 +725,8 @@ void OAuth2Plugin::sendOAuth2PostRequest(QUrl &postData,
 
     d->m_grantType = grantType;
 
-    TRACE() << "Query string = " << postData;
-    postRequest(request, postData.encodedQuery());
+    TRACE() << "Query string = " << postData.query(QUrl::FullyDecoded);
+    postRequest(request, postData.query(QUrl::FullyDecoded).toLatin1());
 }
 
 void OAuth2Plugin::storeResponse(const OAuth2PluginTokenData &response)
diff --git a/src/oauth2plugin.h b/src/oauth2plugin.h
index ce551df..a16c316 100644
--- a/src/oauth2plugin.h
+++ b/src/oauth2plugin.h
@@ -33,6 +33,8 @@
 #include "base-plugin.h"
 #include "oauth2data.h"
 
+class QUrlQuery;
+
 namespace OAuth2PluginNS {
 
 namespace GrantType {
@@ -74,7 +76,7 @@ private:
     bool respondWithStoredToken(const QVariantMap &token,
                                 const QStringList &scopes);
     void refreshOAuth2Token(const QString &refreshToken);
-    void sendOAuth2PostRequest(QUrl &postData,
+    void sendOAuth2PostRequest(QUrlQuery &postData,
                                GrantType::e grantType);
     void storeResponse(const OAuth2PluginTokenData &response);
     QVariantMap parseReply(const QByteArray &contentType,
-- 
GitLab

