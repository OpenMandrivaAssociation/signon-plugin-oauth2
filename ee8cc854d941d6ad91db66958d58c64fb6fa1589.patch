From ee8cc854d941d6ad91db66958d58c64fb6fa1589 Mon Sep 17 00:00:00 2001
From: Alberto Mardegan <mardy@users.sourceforge.net>
Date: Sun, 20 Dec 2020 22:34:42 +0300
Subject: [PATCH] Replace depreacated toTime_t() with toSecsSinceEpoch()

---
 src/oauth1plugin.cpp       |  5 +++--
 src/oauth2plugin.cpp       |  4 ++--
 tests/oauth2plugintest.cpp | 15 +++++++++------
 3 files changed, 14 insertions(+), 10 deletions(-)

diff --git a/src/oauth1plugin.cpp b/src/oauth1plugin.cpp
index 322e8ca..8ec7645 100644
--- a/src/oauth1plugin.cpp
+++ b/src/oauth1plugin.cpp
@@ -198,7 +198,7 @@ bool OAuth1Plugin::respondWithStoredToken(const QVariantMap &token,
         timeToExpiry =
             token.value(EXPIRY).toUInt() +
             token.value(TIMESTAMP).toUInt() -
-            QDateTime::currentDateTime().toTime_t();
+            QDateTime::currentDateTime().toSecsSinceEpoch();
         if (timeToExpiry < 0) {
             TRACE() << "Stored token is expired";
             return false;
@@ -444,7 +444,8 @@ QString OAuth1Plugin::createOAuth1Header(const QString &aUrl,
                       .arg(urlEncode(oauthNonce)));
     authHeader.append(DELIMITER);
     // Timestamp
-    QString oauthTimestamp = QString("%1").arg(QDateTime::currentDateTime().toTime_t());
+    QString oauthTimestamp =
+        QString("%1").arg(QDateTime::currentDateTime().toSecsSinceEpoch());
     authHeader.append(EQUAL_WITH_QUOTES.arg(OAUTH_TIMESTAMP)
                       .arg(urlEncode(oauthTimestamp)));
     authHeader.append(DELIMITER);
diff --git a/src/oauth2plugin.cpp b/src/oauth2plugin.cpp
index d65e261..418e7db 100644
--- a/src/oauth2plugin.cpp
+++ b/src/oauth2plugin.cpp
@@ -239,7 +239,7 @@ bool OAuth2Plugin::respondWithStoredToken(const QVariantMap &token,
         timeToExpiry =
             token.value(EXPIRY).toUInt() +
             token.value(TIMESTAMP).toUInt() -
-            QDateTime::currentDateTime().toTime_t();
+            QDateTime::currentDateTime().toSecsSinceEpoch();
         if (timeToExpiry < 0) {
             TRACE() << "Stored token is expired";
             return false;
@@ -762,7 +762,7 @@ void OAuth2Plugin::storeResponse(const OAuth2PluginTokenData &response)
     if (response.ExpiresIn() > 0) {
         token.insert(EXPIRY, response.ExpiresIn());
     }
-    token.insert(TIMESTAMP, QDateTime::currentDateTime().toTime_t());
+    token.insert(TIMESTAMP, QDateTime::currentDateTime().toSecsSinceEpoch());
     token.insert(SCOPES, d->m_oauth2Data.Scope());
     token.insert(EXTRA_FIELDS, response.ExtraFields());
     d->m_tokens.insert(d->m_key, QVariant::fromValue(token));
diff --git a/tests/oauth2plugintest.cpp b/tests/oauth2plugintest.cpp
index 7d6f563..94e5c43 100644
--- a/tests/oauth2plugintest.cpp
+++ b/tests/oauth2plugintest.cpp
@@ -320,7 +320,7 @@ void OAuth2PluginTest::testPluginProcess_data()
     QVariantMap token;
     token.insert("Token", QLatin1String("tokenfromtest"));
     token.insert("Token2", QLatin1String("token2fromtest"));
-    token.insert("timestamp", QDateTime::currentDateTime().toTime_t());
+    token.insert("timestamp", QDateTime::currentDateTime().toSecsSinceEpoch());
     token.insert("Expiry", 10000);
     tokens.insert(QLatin1String("invalidid"), QVariant::fromValue(token));
     webServerData.m_data.insert(QLatin1String("Tokens"), tokens);
@@ -545,7 +545,7 @@ void OAuth2PluginTest::testPluginHmacSha1Process_data()
     QVariantMap token;
     token.insert("oauth_token", QLatin1String("hmactokenfromtest"));
     token.insert("oauth_token_secret", QLatin1String("hmacsecretfromtest"));
-    token.insert("timestamp", QDateTime::currentDateTime().toTime_t());
+    token.insert("timestamp", QDateTime::currentDateTime().toSecsSinceEpoch());
     token.insert("Expiry", (uint)50000);
     tokens.insert(QLatin1String("invalidid"), QVariant::fromValue(token));
     hmacSha1Data.m_data.insert(QLatin1String("Tokens"), tokens);
@@ -591,7 +591,8 @@ void OAuth2PluginTest::testPluginHmacSha1Process_data()
         true << QVariantMap() << QVariantMap();
     hmacSha1Data.setForceTokenRefresh(false);
 
-    token.insert("timestamp", QDateTime::currentDateTime().toTime_t() - 50000);
+    token.insert("timestamp",
+                 QDateTime::currentDateTime().toSecsSinceEpoch() - 50000);
     token.insert("Expiry", (uint)100);
     tokens.insert(hmacSha1Data.ConsumerKey(), QVariant::fromValue(token));
     hmacSha1Data.m_data.insert(QLatin1String("Tokens"), tokens);
@@ -1650,7 +1651,8 @@ void OAuth2PluginTest::testRefreshToken_data()
     QVariantMap tokens;
     QVariantMap token;
     token.insert("Token", QLatin1String("tokenfromtest"));
-    token.insert("timestamp", QDateTime::currentDateTime().toTime_t() - 10000);
+    token.insert("timestamp",
+                 QDateTime::currentDateTime().toSecsSinceEpoch() - 10000);
     token.insert("Expiry", 1000);
     token.insert("refresh_token", QString("r3fr3sh"));
     tokens.insert(data.ClientId(), QVariant::fromValue(token));
@@ -1665,7 +1667,7 @@ void OAuth2PluginTest::testRefreshToken_data()
 
     QTest::newRow("expired access token") << data.toMap() << response;
 
-    token.insert("timestamp", QDateTime::currentDateTime().toTime_t());
+    token.insert("timestamp", QDateTime::currentDateTime().toSecsSinceEpoch());
     token.insert("Expiry", 50000);
     token.insert("ExtraFields", QVariantMap());
     tokens.insert(data.ClientId(), QVariant::fromValue(token));
@@ -1755,7 +1757,8 @@ void OAuth2PluginTest::testRefreshTokenError()
     QVariantMap tokens;
     QVariantMap token;
     token.insert("Token", QLatin1String("tokenfromtest"));
-    token.insert("timestamp", QDateTime::currentDateTime().toTime_t() - 10000);
+    token.insert("timestamp",
+                 QDateTime::currentDateTime().toSecsSinceEpoch() - 10000);
     token.insert("Expiry", 1000);
     token.insert("refresh_token", QString("r3fr3sh"));
     tokens.insert(data.ClientId(), QVariant::fromValue(token));
-- 
GitLab

